//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CSharp.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class CSharpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, STRING=29, IDENTIFIER=30, NEWLINE=31, 
		WS=32;
	public const int
		RULE_source_file = 0, RULE_root_expr = 1, RULE_using_statement = 2, RULE_namespace_declaration = 3, 
		RULE_qualified_identifier = 4, RULE_namespace_body = 5, RULE_namespace_member_declaration = 6, 
		RULE_type_declaration = 7, RULE_class_declaration = 8, RULE_class_base = 9, 
		RULE_class_body = 10, RULE_class_member_declaration = 11, RULE_method_declaration = 12, 
		RULE_method_body = 13, RULE_block = 14, RULE_statement_list = 15, RULE_statement = 16, 
		RULE_method_header = 17, RULE_formal_parameter_list = 18, RULE_fixed_parameters = 19, 
		RULE_fixed_parameter = 20, RULE_member_name = 21, RULE_return_type = 22, 
		RULE_type = 23, RULE_method_modifier = 24, RULE_class_modifier = 25;
	public static readonly string[] ruleNames = {
		"source_file", "root_expr", "using_statement", "namespace_declaration", 
		"qualified_identifier", "namespace_body", "namespace_member_declaration", 
		"type_declaration", "class_declaration", "class_base", "class_body", "class_member_declaration", 
		"method_declaration", "method_body", "block", "statement_list", "statement", 
		"method_header", "formal_parameter_list", "fixed_parameters", "fixed_parameter", 
		"member_name", "return_type", "type", "method_modifier", "class_modifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'using'", "';'", "'namespace'", "'.'", "'{'", "'}'", "'partial'", 
		"'class'", "':'", "'TODO'", "'('", "')'", "','", "'string[]'", "'object'", 
		"'void'", "'new'", "'public'", "'protected'", "'internal'", "'private'", 
		"'static'", "'virtual'", "'sealed'", "'override'", "'abstract'", "'extern'", 
		"'async'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "STRING", "IDENTIFIER", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSharp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CSharpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CSharpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CSharpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Source_fileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Root_exprContext[] root_expr() {
			return GetRuleContexts<Root_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Root_exprContext root_expr(int i) {
			return GetRuleContext<Root_exprContext>(i);
		}
		public Source_fileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_source_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterSource_file(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitSource_file(this);
		}
	}

	[RuleVersion(0)]
	public Source_fileContext source_file() {
		Source_fileContext _localctx = new Source_fileContext(Context, State);
		EnterRule(_localctx, 0, RULE_source_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 52;
				root_expr();
				}
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 || _la==T__2 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Root_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Using_statementContext using_statement() {
			return GetRuleContext<Using_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_declarationContext namespace_declaration() {
			return GetRuleContext<Namespace_declarationContext>(0);
		}
		public Root_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterRoot_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitRoot_expr(this);
		}
	}

	[RuleVersion(0)]
	public Root_exprContext root_expr() {
		Root_exprContext _localctx = new Root_exprContext(Context, State);
		EnterRule(_localctx, 2, RULE_root_expr);
		try {
			State = 59;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 57;
				using_statement();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 58;
				namespace_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_identifierContext qualified_identifier() {
			return GetRuleContext<Qualified_identifierContext>(0);
		}
		public Using_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterUsing_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitUsing_statement(this);
		}
	}

	[RuleVersion(0)]
	public Using_statementContext using_statement() {
		Using_statementContext _localctx = new Using_statementContext(Context, State);
		EnterRule(_localctx, 4, RULE_using_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			Match(T__0);
			State = 62;
			qualified_identifier();
			State = 63;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_identifierContext qualified_identifier() {
			return GetRuleContext<Qualified_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_bodyContext namespace_body() {
			return GetRuleContext<Namespace_bodyContext>(0);
		}
		public Namespace_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterNamespace_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitNamespace_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_declarationContext namespace_declaration() {
		Namespace_declarationContext _localctx = new Namespace_declarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespace_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(T__2);
			State = 66;
			qualified_identifier();
			State = 67;
			namespace_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CSharpParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CSharpParser.IDENTIFIER, i);
		}
		public Qualified_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterQualified_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitQualified_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_identifierContext qualified_identifier() {
		Qualified_identifierContext _localctx = new Qualified_identifierContext(Context, State);
		EnterRule(_localctx, 8, RULE_qualified_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			Match(IDENTIFIER);
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 70;
				Match(T__3);
				State = 71;
				Match(IDENTIFIER);
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_member_declarationContext[] namespace_member_declaration() {
			return GetRuleContexts<Namespace_member_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_member_declarationContext namespace_member_declaration(int i) {
			return GetRuleContext<Namespace_member_declarationContext>(i);
		}
		public Namespace_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterNamespace_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitNamespace_body(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_bodyContext namespace_body() {
		Namespace_bodyContext _localctx = new Namespace_bodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_namespace_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			Match(T__4);
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__7) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__23) | (1L << T__25))) != 0)) {
				{
				{
				State = 78;
				namespace_member_declaration();
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 84;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_member_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public Namespace_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_member_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterNamespace_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitNamespace_member_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_member_declarationContext namespace_member_declaration() {
		Namespace_member_declarationContext _localctx = new Namespace_member_declarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_namespace_member_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			type_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Class_declarationContext class_declaration() {
			return GetRuleContext<Class_declarationContext>(0);
		}
		public Type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterType_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitType_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Type_declarationContext type_declaration() {
		Type_declarationContext _localctx = new Type_declarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_type_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			class_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Class_bodyContext class_body() {
			return GetRuleContext<Class_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_modifierContext[] class_modifier() {
			return GetRuleContexts<Class_modifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_modifierContext class_modifier(int i) {
			return GetRuleContext<Class_modifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_baseContext class_base() {
			return GetRuleContext<Class_baseContext>(0);
		}
		public Class_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterClass_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitClass_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Class_declarationContext class_declaration() {
		Class_declarationContext _localctx = new Class_declarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_class_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__23) | (1L << T__25))) != 0)) {
				{
				{
				State = 90;
				class_modifier();
				}
				}
				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 96;
				Match(T__6);
				}
			}

			State = 99;
			Match(T__7);
			State = 100;
			Match(IDENTIFIER);
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 101;
				class_base();
				}
			}

			State = 104;
			class_body();
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 105;
				Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_baseContext : ParserRuleContext {
		public Class_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_base; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterClass_base(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitClass_base(this);
		}
	}

	[RuleVersion(0)]
	public Class_baseContext class_base() {
		Class_baseContext _localctx = new Class_baseContext(Context, State);
		EnterRule(_localctx, 18, RULE_class_base);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			Match(T__8);
			State = 109;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Class_member_declarationContext[] class_member_declaration() {
			return GetRuleContexts<Class_member_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_member_declarationContext class_member_declaration(int i) {
			return GetRuleContext<Class_member_declarationContext>(i);
		}
		public Class_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterClass_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitClass_body(this);
		}
	}

	[RuleVersion(0)]
	public Class_bodyContext class_body() {
		Class_bodyContext _localctx = new Class_bodyContext(Context, State);
		EnterRule(_localctx, 20, RULE_class_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(T__4);
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27))) != 0)) {
				{
				{
				State = 112;
				class_member_declaration();
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 118;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_member_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Method_declarationContext method_declaration() {
			return GetRuleContext<Method_declarationContext>(0);
		}
		public Class_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterClass_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitClass_member_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Class_member_declarationContext class_member_declaration() {
		Class_member_declarationContext _localctx = new Class_member_declarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_class_member_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			method_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Method_headerContext method_header() {
			return GetRuleContext<Method_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Method_bodyContext method_body() {
			return GetRuleContext<Method_bodyContext>(0);
		}
		public Method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterMethod_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitMethod_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Method_declarationContext method_declaration() {
		Method_declarationContext _localctx = new Method_declarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_method_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			method_header();
			State = 123;
			method_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Method_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterMethod_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitMethod_body(this);
		}
	}

	[RuleVersion(0)]
	public Method_bodyContext method_body() {
		Method_bodyContext _localctx = new Method_bodyContext(Context, State);
		EnterRule(_localctx, 26, RULE_method_body);
		try {
			State = 127;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 125;
				block();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 126;
				Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			Match(T__4);
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1 || _la==IDENTIFIER) {
				{
				State = 130;
				statement_list();
				}
			}

			State = 133;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(Context, State);
		EnterRule(_localctx, 30, RULE_statement_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 135;
				statement();
				}
				}
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__1 || _la==IDENTIFIER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_identifierContext qualified_identifier() {
			return GetRuleContext<Qualified_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CSharpParser.STRING, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_statement);
		try {
			State = 147;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 140;
				Match(T__1);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 141;
				qualified_identifier();
				State = 142;
				Match(T__10);
				State = 143;
				Match(STRING);
				State = 144;
				Match(T__11);
				State = 145;
				Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_nameContext member_name() {
			return GetRuleContext<Member_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Method_modifierContext[] method_modifier() {
			return GetRuleContexts<Method_modifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Method_modifierContext method_modifier(int i) {
			return GetRuleContext<Method_modifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Method_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterMethod_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitMethod_header(this);
		}
	}

	[RuleVersion(0)]
	public Method_headerContext method_header() {
		Method_headerContext _localctx = new Method_headerContext(Context, State);
		EnterRule(_localctx, 34, RULE_method_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27))) != 0)) {
				{
				{
				State = 149;
				method_modifier();
				}
				}
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 155;
				Match(T__6);
				}
			}

			State = 158;
			return_type();
			State = 159;
			member_name();
			State = 160;
			Match(T__10);
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << T__14) | (1L << T__15))) != 0)) {
				{
				State = 161;
				formal_parameter_list();
				}
			}

			State = 164;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formal_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_parametersContext fixed_parameters() {
			return GetRuleContext<Fixed_parametersContext>(0);
		}
		public Formal_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterFormal_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitFormal_parameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Formal_parameter_listContext formal_parameter_list() {
		Formal_parameter_listContext _localctx = new Formal_parameter_listContext(Context, State);
		EnterRule(_localctx, 36, RULE_formal_parameter_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			fixed_parameters();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_parameterContext[] fixed_parameter() {
			return GetRuleContexts<Fixed_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_parameterContext fixed_parameter(int i) {
			return GetRuleContext<Fixed_parameterContext>(i);
		}
		public Fixed_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterFixed_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitFixed_parameters(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_parametersContext fixed_parameters() {
		Fixed_parametersContext _localctx = new Fixed_parametersContext(Context, State);
		EnterRule(_localctx, 38, RULE_fixed_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			fixed_parameter();
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 169;
				Match(T__12);
				State = 170;
				fixed_parameter();
				}
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public Fixed_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterFixed_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitFixed_parameter(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_parameterContext fixed_parameter() {
		Fixed_parameterContext _localctx = new Fixed_parameterContext(Context, State);
		EnterRule(_localctx, 40, RULE_fixed_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			type();
			State = 177;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public Member_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterMember_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitMember_name(this);
		}
	}

	[RuleVersion(0)]
	public Member_nameContext member_name() {
		Member_nameContext _localctx = new Member_nameContext(Context, State);
		EnterRule(_localctx, 42, RULE_member_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Return_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterReturn_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitReturn_type(this);
		}
	}

	[RuleVersion(0)]
	public Return_typeContext return_type() {
		Return_typeContext _localctx = new Return_typeContext(Context, State);
		EnterRule(_localctx, 44, RULE_return_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 46, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << T__14) | (1L << T__15))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_modifierContext : ParserRuleContext {
		public Method_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterMethod_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitMethod_modifier(this);
		}
	}

	[RuleVersion(0)]
	public Method_modifierContext method_modifier() {
		Method_modifierContext _localctx = new Method_modifierContext(Context, State);
		EnterRule(_localctx, 48, RULE_method_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_modifierContext : ParserRuleContext {
		public Class_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterClass_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitClass_modifier(this);
		}
	}

	[RuleVersion(0)]
	public Class_modifierContext class_modifier() {
		Class_modifierContext _localctx = new Class_modifierContext(Context, State);
		EnterRule(_localctx, 50, RULE_class_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__23) | (1L << T__25))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\"', '\xC0', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x3', '\x2', '\x6', '\x2', '\x38', '\n', '\x2', 
		'\r', '\x2', '\xE', '\x2', '\x39', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '>', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'K', '\n', '\x6', '\f', 
		'\x6', '\xE', '\x6', 'N', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\a', 
		'\a', 'R', '\n', '\a', '\f', '\a', '\xE', '\a', 'U', '\v', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\a', '\n', '^', '\n', '\n', '\f', '\n', '\xE', '\n', '\x61', 
		'\v', '\n', '\x3', '\n', '\x5', '\n', '\x64', '\n', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x5', '\n', 'i', '\n', '\n', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', 'm', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\a', '\f', 't', '\n', '\f', '\f', '\f', '\xE', 
		'\f', 'w', '\v', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x5', '\xF', '\x82', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\x86', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x6', '\x11', '\x8B', '\n', '\x11', '\r', '\x11', '\xE', '\x11', '\x8C', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x96', '\n', '\x12', '\x3', 
		'\x13', '\a', '\x13', '\x99', '\n', '\x13', '\f', '\x13', '\xE', '\x13', 
		'\x9C', '\v', '\x13', '\x3', '\x13', '\x5', '\x13', '\x9F', '\n', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', 
		'\xA5', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\xAE', 
		'\n', '\x15', '\f', '\x15', '\xE', '\x15', '\xB1', '\v', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x2', '\x2', '\x1C', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x2', '\x5', '\x3', '\x2', '\x10', 
		'\x12', '\x3', '\x2', '\x13', '\x1E', '\x5', '\x2', '\x13', '\x18', '\x1A', 
		'\x1A', '\x1C', '\x1C', '\x2', '\xB6', '\x2', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '=', '\x3', '\x2', '\x2', '\x2', '\x6', '?', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x43', '\x3', '\x2', '\x2', '\x2', '\n', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\f', 'O', '\x3', '\x2', '\x2', '\x2', '\xE', 'X', 
		'\x3', '\x2', '\x2', '\x2', '\x10', 'Z', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x14', 'n', '\x3', '\x2', '\x2', '\x2', 
		'\x16', 'q', '\x3', '\x2', '\x2', '\x2', '\x18', 'z', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '|', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x83', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\"', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '$', '\x9A', '\x3', '\x2', '\x2', '\x2', '&', '\xA8', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xAA', '\x3', '\x2', '\x2', '\x2', '*', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', ',', '\xB5', '\x3', '\x2', '\x2', '\x2', '.', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\xB9', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\xBB', '\x3', '\x2', '\x2', '\x2', '\x34', '\xBD', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x38', '\x5', '\x4', '\x3', '\x2', '\x37', '\x36', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x39', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x3', '\x3', '\x2', '\x2', '\x2', ';', '>', '\x5', 
		'\x6', '\x4', '\x2', '<', '>', '\x5', '\b', '\x5', '\x2', '=', ';', '\x3', 
		'\x2', '\x2', '\x2', '=', '<', '\x3', '\x2', '\x2', '\x2', '>', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '?', '@', '\a', '\x3', '\x2', '\x2', '@', 
		'\x41', '\x5', '\n', '\x6', '\x2', '\x41', '\x42', '\a', '\x4', '\x2', 
		'\x2', '\x42', '\a', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\a', 
		'\x5', '\x2', '\x2', '\x44', '\x45', '\x5', '\n', '\x6', '\x2', '\x45', 
		'\x46', '\x5', '\f', '\a', '\x2', '\x46', '\t', '\x3', '\x2', '\x2', '\x2', 
		'G', 'L', '\a', ' ', '\x2', '\x2', 'H', 'I', '\a', '\x6', '\x2', '\x2', 
		'I', 'K', '\a', ' ', '\x2', '\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 
		'K', 'N', '\x3', '\x2', '\x2', '\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 
		'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'N', 'L', '\x3', '\x2', '\x2', '\x2', 'O', 'S', '\a', '\a', '\x2', 
		'\x2', 'P', 'R', '\x5', '\xE', '\b', '\x2', 'Q', 'P', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'U', '\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\a', '\b', '\x2', 
		'\x2', 'W', '\r', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x5', '\x10', 
		'\t', '\x2', 'Y', '\xF', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x5', 
		'\x12', '\n', '\x2', '[', '\x11', '\x3', '\x2', '\x2', '\x2', '\\', '^', 
		'\x5', '\x34', '\x1B', '\x2', ']', '\\', '\x3', '\x2', '\x2', '\x2', '^', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', 
		'_', '`', '\x3', '\x2', '\x2', '\x2', '`', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x62', '\x64', '\a', 
		'\t', '\x2', '\x2', '\x63', '\x62', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x65', '\x66', '\a', '\n', '\x2', '\x2', '\x66', 'h', '\a', ' ', 
		'\x2', '\x2', 'g', 'i', '\x5', '\x14', '\v', '\x2', 'h', 'g', '\x3', '\x2', 
		'\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'l', '\x5', '\x16', '\f', '\x2', 'k', 'm', '\a', '\x4', 
		'\x2', '\x2', 'l', 'k', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', 
		'\x2', '\x2', 'm', '\x13', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\a', 
		'\v', '\x2', '\x2', 'o', 'p', '\a', '\f', '\x2', '\x2', 'p', '\x15', '\x3', 
		'\x2', '\x2', '\x2', 'q', 'u', '\a', '\a', '\x2', '\x2', 'r', 't', '\x5', 
		'\x18', '\r', '\x2', 's', 'r', '\x3', '\x2', '\x2', '\x2', 't', 'w', '\x3', 
		'\x2', '\x2', '\x2', 'u', 's', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', 
		'\x2', '\x2', '\x2', 'v', 'x', '\x3', '\x2', '\x2', '\x2', 'w', 'u', '\x3', 
		'\x2', '\x2', '\x2', 'x', 'y', '\a', '\b', '\x2', '\x2', 'y', '\x17', 
		'\x3', '\x2', '\x2', '\x2', 'z', '{', '\x5', '\x1A', '\xE', '\x2', '{', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x5', '$', '\x13', '\x2', 
		'}', '~', '\x5', '\x1C', '\xF', '\x2', '~', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\x82', '\x5', '\x1E', '\x10', '\x2', '\x80', '\x82', '\a', 
		'\x4', '\x2', '\x2', '\x81', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\x82', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x85', '\a', '\a', '\x2', '\x2', '\x84', '\x86', '\x5', 
		' ', '\x11', '\x2', '\x85', '\x84', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x86', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x87', '\x88', '\a', '\b', '\x2', '\x2', '\x88', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x89', '\x8B', '\x5', '\"', '\x12', '\x2', '\x8A', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '!', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x96', '\a', '\x4', '\x2', '\x2', '\x8F', '\x90', '\x5', '\n', '\x6', 
		'\x2', '\x90', '\x91', '\a', '\r', '\x2', '\x2', '\x91', '\x92', '\a', 
		'\x1F', '\x2', '\x2', '\x92', '\x93', '\a', '\xE', '\x2', '\x2', '\x93', 
		'\x94', '\a', '\x4', '\x2', '\x2', '\x94', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x95', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '#', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x99', '\x5', '\x32', '\x1A', '\x2', '\x98', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\x9F', '\a', '\t', '\x2', '\x2', '\x9E', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x9E', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', 
		'\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x5', '.', '\x18', 
		'\x2', '\xA1', '\xA2', '\x5', ',', '\x17', '\x2', '\xA2', '\xA4', '\a', 
		'\r', '\x2', '\x2', '\xA3', '\xA5', '\x5', '&', '\x14', '\x2', '\xA4', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\a', 
		'\xE', '\x2', '\x2', '\xA7', '%', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'\xA9', '\x5', '(', '\x15', '\x2', '\xA9', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xAF', '\x5', '*', '\x16', '\x2', '\xAB', '\xAC', '\a', 
		'\xF', '\x2', '\x2', '\xAC', '\xAE', '\x5', '*', '\x16', '\x2', '\xAD', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', ')', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\x5', '\x30', '\x19', 
		'\x2', '\xB3', '\xB4', '\a', ' ', '\x2', '\x2', '\xB4', '+', '\x3', '\x2', 
		'\x2', '\x2', '\xB5', '\xB6', '\a', ' ', '\x2', '\x2', '\xB6', '-', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\xB8', '\x5', '\x30', '\x19', '\x2', '\xB8', 
		'/', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\t', '\x2', '\x2', '\x2', 
		'\xBA', '\x31', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\t', '\x3', 
		'\x2', '\x2', '\xBC', '\x33', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', 
		'\t', '\x4', '\x2', '\x2', '\xBE', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x13', '\x39', '=', 'L', 'S', '_', '\x63', 'h', 'l', 'u', '\x81', '\x85', 
		'\x8C', '\x95', '\x9A', '\x9E', '\xA4', '\xAF',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
